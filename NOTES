Big Idea: The google of recipes.

-!- New idea: 2-13-2020
  = Maybe it would be simpler to have just a list of steps, and manually
    enter the ingredients and quantities into the database, and search on that?
      Basically I think I need to "flatten" the hierarchy as it currently is,
      because I feel like I'm shoehorning it into place.
      - List of ingredients with relative quantities (or "base" quantity for 1
      person), a list of steps, and links to techniques used? I mean, there
      isn't that many really complicated individual techniques in normal
      cooking, I feel like it's mostly just baking/pastry stuff
      - but at the same time, I want to have quick links out to learn on the
      fly, so I can keep individual recipes "clean" and say stuff like "make a
      burre blanc" or do i?
      - As long as the steps are sensible and everything is efficiently laid
      out, I don't need to overcomplicate the data model. This is a portfolio
      project after all! Usability and getting a working, complete app out
      there is the most important thing. I can complicate it later if I really
      want to.

TOC
- x1x What it looks like
- x2x Monetization ideas
- x3x Unsorted data scheme ideas
- x4x Unsorted ideas for things I want to be able to do
- x5x Data Schema (in rails model terms)

What it looks like: (x1x)
  - Simple interface with just a search bar and a slideshow of movies and/or
  images behind, big colorful food pictures, people having fun cooking at home,
  stuff like that
  - Also a not-so-hidden link on the side to browse by various categories like
  region, cuisine, ingredient type, etc.
  - The basic idea is that the recipes integrate with a shopping list app, so
  you can pick what you want to eat, get a shopping list that combines the per-
  meal amounts of everything into batches (like 5 lbs of carrots), and even
  integrates with calandar apps to set reminders to do things like take meat
  out of the freezer on the morning of a particular meal, or when to start
  cooking in order to be done in time for whenever you say you want to eat that
  day.
  - For registered users/subscribers, also a library of easy-to-follow cooking
  lessons with pictures and everything, and links to recipes.

Monetization: (x2x)
  - I'd prefer no ads, if possible
  - subscription service for the lessons and fancy 3rd-party service
  integrations, very low, like $10 per year
  - affiliate links to equipment on recipe and lesson pages
  - affiliate links to amazon fresh for grocery delivery purchases
    + possibly other grocery affiliate programs like wal-mart, if they exist
  - once big enough, selling prominent space for food influencers to showcase
  their own recipes and put their own affiliate links in, make their lives
  easier etc.
  - partnerships with sponsored ingredients and equipment (probably better
  deals than affiliate links, but requires large audience I bet)

Unsorted ideas for the data scheme: (x3x)
  - 2 basic data units:
    + ingredients (onions, chicken, cardamom)
    + techniques (sear, chop, strain, bake, saute, etc)
      !! issue !! What about steps that involve intermediate products, like
                  straining a sauce? The sauce won't be a basic ingredient in
                  the db, because you construct it during the recipe.
  - Some quantity of one or more ingredients are combined with one technique to
  create a "step"
  - recipes are composed of one or more steps
  - for each ingredient+technique combo, stock photos of before, after, and
  possibly during. For example, dicing onions would have two pictures, one of
  an onion just starting to be peeled, and one of a diced onion. If the user
  clicks the link for "peeling an onion" they are taken to a lesson page on
  ways to peel an onion. There is also an affiliate link to a small food
  processor on the onion+chop step.

  - grocery lists are one or more ingredients, each with a quantity in grams,
  displayed in the user's chosen measurement system (defaults set by country).
    + calculated from a list of recipes selected by user

Unsorted functions and ideas / things I want to be able to do (x4x)
  - site-wide messages for logged-in users, set to expire after arbitrary
  amount of time
    + but not a full-blown user messaging system, that's not necessary
    + basically fancy flash messages

Data Schema (in rails model terms) (x5x)
  "-" = column in database
  "+" = association in model definition

  Ingredient
    - id.integer (pk)
    - name.string
    - caloriespergram.integer

    + has_many :join_ingredientcategories_ingredients
    + has_many :ingredient_categories, through: :join_ingredientcategories_ingredients

    + has_many :join_ingredients_recipes
    + has_many :recipes, through: :join_ingredients_recipes

  Equipment
    - id.integer (pk)
    - name.string
    - equipment_type_id.integer
    + belongs_to :equipment_type

  Action
    - id.integer (pk)
    - title.string
    - body.text
    + belongs_to :recipe

  Recipe
    - id.integer (pk)
    - name.string
    - origin.string
    - author.string
    - views.integer
    - saves.integer

    + has_many :actions

    + has_many :join_ingredients_recipes
    + has_many :ingredients, through: :join_ingredients_recipes

    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipe_types, through: :join_recipetypes_recipes

  Recipe Type
    - id.integer (pk)
    - name.string
    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipes, through: :join_recipetypes_recipes

  Ingredient Type
    - id.integer (pk)
    - name.string (like meat, vegetable, etc)
    + has_many :join_ingredienttypes_ingredients
    + has_many :ingredients, through: :join_ingredienttypes_ingredients

  Equipment Type
    - id.integer (pk)
    - name.string (pan, pot, grater, etc)
    
    + has_many :equipments

-- Join Tables --
  Join_RecipeTypes_Recipe
    - t.integer :id (pk)
    - t.references :recipe
    - t.references :recipe_type
    + belongs_to :recipe
    + belongs_to :recipe_type

  Join_IngredientTypes_ingredient
    - t.integer :id (pk)
    - t.references :ingredient_type
    - t.references :ingredient
    + belongs_to :ingredient_type
    + belongs_to :ingredient

  Join_Ingredients_Recipe
    - id.integer (pk)
    - t.references :recipe
    - t.references :ingredient
    + belongs_to :recipe
    + belongs_to :ingredient
