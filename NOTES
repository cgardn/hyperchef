Big Idea: The google of recipes.

Immediate TODOs:
  - fix rounding errors on ing_quant conversion in Recipe model
  - also have it change base units in ing_quant when convert=true
  - probably just go straight to JS for the convert buttons? a whole endpoint just to change a few values seems silly, 
      but what about people with NoScript?

!! New features - user profiles, favoriting recipes, and building grocery lists !!
  - can re-use same search page, but add a button for logged-in users that only filters through saved/favorited recipes
  - can have many grocery lists/weekly meal plans
    -- each composed of multiple recipes
    -- meal plan model will own the function(s) for generating grocery lists
    -- meal plan model will also have attribute for owning grocery list? or always generated dynamically? 
      - what about interactivity on the list, like checking off stuff as you get it? what about
        saving grocery lists (handled by generating from meal plans? Would someone want to save a grocery list
        separate from a meal plan? Should I even allow that?)?
  + each UserProfile has many MealPlans
    - grocery lists are arrays of ingredient IDs and quantities, owned by MealPlans and generated with MealPlan model functions
    - each MealPlan has exactly one grocery list, it is editable but there's only one per plan
      - can start with non-editable grocery lists that are always generated dynamically based on meal plan, add editiable lists later
        - easier option, only need the meal plan model

-=- Model Planning -=-

--- Pre-Soft-Launch
? make side-bar filters a partial (where else does the side-bar appear besides search results?)
? make equipment links a reusable partial (added to recipe show view, where else will it need to be used?)

! ability to change imperial or metric quantities (user) and default units (admin, but still stored as grams internally - just setting a conversion factor)
  - add bool column to ingredient for "is a liquid"
  - add function to join table (where quantities live) for conversions between imperial and metric
  - buttons connect to js func that asks controller for conversion factors, join model for quantities, and returns new value
    - quantities stored as grams internally, so conversion factor to grams is just 1 for everything
  + Imperial amounts should def be converted into pounds+ounces, or cups+ounces (for solid vs liquid), should I split out kilos and litres?

look at various things that get done to recipes, ingredients, and tags in views+controllers and
  think about what could/should be pulled into model functions
* add recipe name->slug conversion code to a helper function so it's just in one place
  - needs knowledge of where to put helpers
* make the equipment links do something, or just disable them for soft-launch until I get affiliate links going

* way to add or remove steps in recipe create/edit pages
  ! Fixed for now by creating 20 blank steps for new recipe form. Will circle back around when updating to modern UI
  - probably easy to fix with React, but that's a whole thing

get some background images+gradients going to fit the pixel-art game theme
style+format everything
  - add background gifs/movies of cooking+food to front page
    -- edit together some stock footage and put it on the home page
  - add big graphic above search bar
    -- pixel art? animated chipmunk chef hero guy?
      - dream: keep sky-blue background, add green-grass/kitchen tile floor, pixel-chef-warrior swings in and fights vegetables with spatula/knife
              while wearing toque, ends with star wars-style holding spatula to sky while chef's jacket flaps around him, stays there
  - replace recipe, ingredient, and equipment links with bootstrap cards (change partials)
fix super long urls for searches -> put a block in the routing file for this route, can use Rack things to parse query strings
  - UPDATE sorta fixed by using 'check_box_tag' instead of 'formBuilder.check_box', removing the default behavior of sending empty boxes


--- Post Soft-Launch
add a bunch of recipes
---
add user profile model for saving recipes
add ability to save recipes to your profile
  - all the little parts, like the 'save/favorite' button/icon or whatever,
      the columns in the user profile model, plus the routes and functions to connect it all
add grocery list function (save or <3 a recipe and it goes on the one list, that list also generates a grocery list)
- eventually have multiple named custom lists

Things I did, and how
* replaced all URL ids with the recipe's name, subbing hyphens for spaces (ex: /recipes/10 -> recipes/chicken-milanese)
  - added :slug as parameter in recipe model
  - changed recipe routing to -> resources :recipes, except: [:create], param: :slug
  - overwrote to_param in recipe model to return :slug instead of :id
* added devise, but being signed in doesn't do anything yet
  - added "gem 'devise'" to Gemfile
  - followed instructions on the devise github page to install and create a plain User model

* Added Users and User Profiles
  - used devise gem for users and authentication
  - created separate UserProfile model to leave devise user and auth stuff untouched
    -- not sure if this is the "correct" way, but I like the idea of leaving the pre-built solution totally alone
       plus maybe if I want to swap devise for something else, the app-specific profile stuff is not totally coupled
       to devise
    -- each UserProfile belongs_to one User, and the profiles are created and assigned in the User controller during 
       signup
    -- UserProfile is where favorites list lives, also where meal plans will live too
  + each UserProfile has exactly one FavoriteList
    - favorite lists are a many-to-many association between UserProfiles and Recipes, through a join table
---

TODOs:

add ability to edit what gram quantities are displayed as on recipe edit page
+ Weird Behavior/Bugs
  - Admin panel: clicking a tag to edit brings me to the edit page for that tag, not staying inside the admin panel. Need AJAX?
  - Search results sidebar behavior: add one-click way to remove the search query (like show the query with a little 'x' next to it or something
    + basically, clarify the behavior for getting exactly the search you want, so you know exactly at a glance what the search will be when you
      press 'filter'
  - Recipe edit flow: if two steps have the same order number, it pushes
    everything up by 1 to preserve order. Better would be rejecting the
    edit, putting error in flash, and re-rendering the form. Even better
    still would be somehow doing this with model-level validations, if
    possible (or maybe an #update before-action).
    + Also could use a way to check for gaps in the order and fix them
      (i.e. if the steps have turned into 1-3-5-6-7, correct it into 1-2-3-4-5
      while preserving original order)
    + Eventuall I want to make this drag-and-drop anyways, or at least 
      Steam-style numbers with up/down clicky boxes
  - Waaay too many database hits for a filter search

+ Refactoring
  - single shared form for each resource (if possible)

+ Features
  - actual styling with Bootstrap
  - tabs or some other sort of show/hide for ingredient list, to allow many more things
  - allow filtering ingredients by category, maybe with mini-search bar?
  - JS for quick-search in-page
  - model data as a graph, all ingredient and sub-meal parts (dough, sauce, etc)
    one-directional relationships (once you use an ingredient in something, you
    can't undo it). This will allow easier linking/building lists of techniques
    and skills like "make a burre blanc" can link to the burre blanc page, or 
    just insert the steps in as a tab or hidden drop-down right in the page
    so you can skip it if you want.
  - Progressive Web App (add to home screen)
  - lock downloading to offline of recipes to paid users
  - build in way for me to A/B test different affiliate programs, to see if people
    prefer buying through amazon or some other thing (like wal-mart, if they have
    affiliate programs)

  !+! all the fancy stuff, eventually, can still use the Rails backend by just
      setting up an API that is consumed by the PWA (and the React frontend??)
      - but first, make it look pretty with normal bootstrap+AJAX, including on
        mobile
      - and when I get there, rate-limit API usage per-user, so the one clever
        person out there can't just download the entire database/DDOS the API
      - probably limit it to 1-2 recipes downloaded per second, no more than 100 per minute
     !+ What about allowing users to "download all" of their saved recipes? is 
        there a way to specifically allow that while disallowing someone from 
        maliciously grabbing everything on the database?

-!- New idea: 2-13-2020
  = Maybe it would be simpler to have just a list of steps, and manually
    enter the ingredients and quantities into the database, and search on that?
      Basically I think I need to "flatten" the hierarchy as it currently is,
      because I feel like I'm shoehorning it into place.
      - List of ingredients with relative quantities (or "base" quantity for 1
      person), a list of steps, and links to techniques used? I mean, there
      isn't that many really complicated individual techniques in normal
      cooking, I feel like it's mostly just baking/pastry stuff
      - but at the same time, I want to have quick links out to learn on the
      fly, so I can keep individual recipes "clean" and say stuff like "make a
      burre blanc" or do i?
      - As long as the steps are sensible and everything is efficiently laid
      out, I don't need to overcomplicate the data model. This is a portfolio
      project after all! Usability and getting a working, complete app out
      there is the most important thing. I can complicate it later if I really
      want to.

TOC
- x1x What it looks like
- x2x Monetization ideas
- x3x Unsorted data scheme ideas
- x4x Unsorted ideas for things I want to be able to do
- x5x Data Schema (in rails model terms)

What it looks like: (x1x)
  - Simple interface with just a search bar and a slideshow of movies and/or
  images behind, big colorful food pictures, people having fun cooking at home,
  stuff like that
  - Also a not-so-hidden link on the side to browse by various categories like
  region, cuisine, ingredient type, etc.
  - The basic idea is that the recipes integrate with a shopping list app, so
  you can pick what you want to eat, get a shopping list that combines the per-
  meal amounts of everything into batches (like 5 lbs of carrots), and even
  integrates with calandar apps to set reminders to do things like take meat
  out of the freezer on the morning of a particular meal, or when to start
  cooking in order to be done in time for whenever you say you want to eat that
  day.
  - For registered users/subscribers, also a library of easy-to-follow cooking
  lessons with pictures and everything, and links to recipes.

Monetization: (x2x)
  - I'd prefer no ads, if possible
  - subscription service for the lessons and fancy 3rd-party service
  integrations, very low, like $10 per year
  - affiliate links to equipment on recipe and lesson pages
  - affiliate links to amazon fresh for grocery delivery purchases
    + possibly other grocery affiliate programs like wal-mart, if they exist
  - once big enough, selling prominent space for food influencers to showcase
  their own recipes and put their own affiliate links in, make their lives
  easier etc.
  - partnerships with sponsored ingredients and equipment (probably better
  deals than affiliate links, but requires large audience I bet)

Unsorted ideas for the data scheme: (x3x)
  - 2 basic data units:
    + ingredients (onions, chicken, cardamom)
    + techniques (sear, chop, strain, bake, saute, etc)
      !! issue !! What about steps that involve intermediate products, like
                  straining a sauce? The sauce won't be a basic ingredient in
                  the db, because you construct it during the recipe.
  - Some quantity of one or more ingredients are combined with one technique to
  create a "step"
  - recipes are composed of one or more steps
  - for each ingredient+technique combo, stock photos of before, after, and
  possibly during. For example, dicing onions would have two pictures, one of
  an onion just starting to be peeled, and one of a diced onion. If the user
  clicks the link for "peeling an onion" they are taken to a lesson page on
  ways to peel an onion. There is also an affiliate link to a small food
  processor on the onion+chop step.

  - grocery lists are one or more ingredients, each with a quantity in grams,
  displayed in the user's chosen measurement system (defaults set by country).
    + calculated from a list of recipes selected by user

Unsorted functions and ideas / things I want to be able to do (x4x)
  - site-wide messages for logged-in users, set to expire after arbitrary
  amount of time
    + but not a full-blown user messaging system, that's not necessary
    + basically fancy flash messages

Data Schema (in rails model terms) (x5x)
  "-" = column in database
  "+" = association in model definition

  Ingredient
    - id.integer (pk)
    - name.string
    - caloriespergram.integer

    + has_many :join_ingredientcategories_ingredients
    + has_many :ingredient_categories, through: :join_ingredientcategories_ingredients

    + has_many :join_ingredients_recipes
    + has_many :recipes, through: :join_ingredients_recipes

  Equipment
    - id.integer (pk)
    - name.string
    - equipment_type_id.integer
    + belongs_to :equipment_type

  Action
    - id.integer (pk)
    - title.string
    - body.text
    + belongs_to :recipe

  Recipe
    - id.integer (pk)
    - name.string
    - origin.string
    - author.string
    - views.integer
    - saves.integer

    + has_many :actions

    + has_many :join_ingredients_recipes
    + has_many :ingredients, through: :join_ingredients_recipes

    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipe_types, through: :join_recipetypes_recipes

  Recipe Type
    - id.integer (pk)
    - name.string
    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipes, through: :join_recipetypes_recipes

  Ingredient Type
    - id.integer (pk)
    - name.string (like meat, vegetable, etc)
    + has_many :join_ingredienttypes_ingredients
    + has_many :ingredients, through: :join_ingredienttypes_ingredients

  Equipment Type
    - id.integer (pk)
    - name.string (pan, pot, grater, etc)
    
    + has_many :equipments

-- Join Tables --
  Join_RecipeTypes_Recipe
    - t.integer :id (pk)
    - t.references :recipe
    - t.references :recipe_type
    + belongs_to :recipe
    + belongs_to :recipe_type

  Join_IngredientTypes_ingredient
    - t.integer :id (pk)
    - t.references :ingredient_type
    - t.references :ingredient
    + belongs_to :ingredient_type
    + belongs_to :ingredient

  Join_Ingredients_Recipe
    - id.integer (pk)
    - t.references :recipe
    - t.references :ingredient
    + belongs_to :recipe
    + belongs_to :ingredient
