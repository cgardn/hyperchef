Big Idea: The google of recipes.

area below for TODOs and near-future planning
search (xHDJx) for design journal

Pre-Launch:
  + update status bar code on recipe cards to actually reflect time and ingredient count
    -> difficulty is a column on recipes now, have to manually set it

  + style recipe show page
    - lightly styled, good enough for now

  ? paginate search results
    -> wait until I can see live production speeds, apparently dev mode adds a lot of hot-reloading support that slows everything down
    -> so far it's pretty dang fast actually
  ~ probably make search results a partial and use it in the user's favorites list
    -> fixed user profile results list to match query page
  + put on Heroku
  + make my account and make sure it's admin
 !! verify all user-facing pages work as expected, and are visually consistent
    + fix unit conversion (200g becomes 14 lbs)
      + i forgot to convert from metric base to imperial base before collecting units
        so a 200g portion became 200oz->12.5 lbs, instead of 7oz
    + add serving-size changer to recipe views, and include in multiplier/unit conversion
      + requires converting base quantities to single serving in recipes
      + swapped plain link for small form, had to fiddle with the model func a bit but we
        got there in the end
    + add way to have a quantity of "1 unit/piece" for things like potatoes and chicken breasts.
      + These single units should be ignored during unit conversion
      + completed with new unit hash attribute
    + recipe#show add background image for steps (visual clarity, gradient lightness at bottom
      gets too close to light text)
      + not an image though, just a bg-secondary on the div
    + fix recipe#show equipment link color (lighter)
      + changed to buttons for now, proper layout instead of stacked <br>'s
    + fix recipe#show jumbotron text color (should be dark)
      + added bootstrap 'text-dark' class just to that jumbotron element
    ~ consider a sidebar/non-modal for desktop mode (probably lg and above, md is for tablets)
      + at least change the order of the filter button and the "go" button
      + changed order of filter and go button, re-did the text to make it hopefully more clear
    + re-do card graphics with less anti-aliasing (makes it too fuzzy)
      + Removed images for text, replaced with regular text since it's pretty close
      + placed progress bar images with bootstrap progress bars, cleaner and easier to size correctly
    + eager loading on database calls, instead of pulling ingredients for recipe#show one at a time, for example
      + look for N+1 queries, if time permits then make a programmatic way to check database calls in the code?
        seems complicated and time-consuming, maybe save the profiling for after launch
      + I did it! Not for the admin views, but for user-facing views all the N+1's were fixed with eager loading
        and .joins.
    + fix wrong ingredient quantities loading into recipe#edit for admin
    + fix filter checkboxes still reserving a blank line, even if they're not loaded due to no recipes using those tags
      + it was an extra line break outside of the checkbox conditional, so the line was broken once for 
        every tag whether it got included in the final modal or not
    + ingredient edit page "back to list" should go back to admin#ingredients, not to ingredient#index
      + redirect all the endpoints for recipe/ingredient/tag indexes to the admin page in routing 
        file and disable the controller functions
      + good for now, it goes back to '/admin', not sure how to get it to select the ingredients tab specifically,
        /admin#ingredients brings you to just the tab panel with no tabs above it

    
  ~ fill up live version with at least 10-15 Hello fresh recipes, plus
    Cassi's recipes, and whatever else I can find - hopefully at least 50, ideally
    100+ eventually depending on how long it takes. Find recipes from all our cookbooks if I have to.
  + make sure all the other unused routes are actually removed from routing file, and
    associated view templates and controller actions are removed/inaccessible.
  + double check random non-admin users and non-signed-in users can't access anything besides the following:
    * search#index
    * search#query
    * recipe#show
    * profiles stuff
    + everything else that isn't also used by admin should be removed from files and routes, and redirected in the
      routing file
    + added admin auth to all non-user controller actions, removed a bunch of unused controller actions and routes from file
  + set up emails the same way as the sample app, for signup confirmation/password recovery type stuff ONLY at first
      - will set up mailing list type things much later
  + fix non-updating time_score and ingredient_score on production

Post-Launch (v1.1):
  - tidy up url for searches
  - way to programatically check all routes configured in the router against what's actually set up with views and actions
  + replace filter 'X' at top right with another "close" button
  - all actions that take in params should gracefully handle if they're not there (i.e. avoid calling methods on nil)
  - better way of putting in steps - maybe make a partial that renders a markdown file, and make the steps one big markdown file.
    - requires the ability to render a markdown file as a partial
  - drafts of recipes, auto-saving of drafts while working
  - something to ping the site to keep it on the Heroku free tier
  - maybe get rid of ingredients count in recipe card? "Ingredients" is unclear - is it number of ingredients, how hard they are to work with, cost, etc?
    - i can see a lot of people thinking it's rating ingredient cost, for example
  - tests for all the devise views and actions (if possible), also tests for email views and actions
  - log everything with delayed ActiveJobs or ActiveQueue or whatever it's called
    - would be nice to make admin views that show graphs of visits and whats getting clicked on and stuff
    - also would be nice to be able to see most active users, or at least broad user insights like what recipes get favorited the most, etc
      - also bounce-rate and things like that
  - add a "only favorites" option to the search filters
  - BUG: "back to search" button on recipe#show is a fresh search, doesn't save your filters
  ~ filter buttons still need you to press Go, should auto-filter when you close the filter modal
    + at least the order is more sensible now, filters are above the search button
    + js triggers form submission on clicking filter close button or clicking outside modal
  ~ test coverage of at least all the controller actions and user stories
    + bare minimum, check for all pages loading without errors so i know when i broke a page
      + this is done now, not full coverage but at i'll know if i broke something user-facing
* - refactor list:
    - need a way to programatically fill the units hash on an ingredient, without having to type out "imperial_show" etc every place I make a new ingredient
    - i have to define an ingredient in the recipe model test, in order to test the recipe's unit conversion method?
      - something's in the wrong place, not sure if conversion func should go on ingredient or what (probably this)
    - remove old ing_quant code from recipe model, adapt text conversion func to work with new ingredient units (show/list)
    - remove old is_liquid bool from ingredient code and probably remove the column as well
      - maybe make an is_liquid function that just checks the unit type, if necessary? is it faster to have a database column?
    - Pull recipe favorite-button-form out of both show view and card and make it a partial
      - used in multiple places, on recipe card and at top of recipe show page
      - but the card has special graphics, how does that affect making it a partial?
    - Time to think about AJAX responses for the favorite button and whatever else
    - can probably make the recipe edit page even more compact, all the checkbox sections look pretty similar
  - give users ability to save custom ingredient amounts on favorited recipes
  - give admin a way to add invisible "fudge factor" on individual ingredients on individual recipes, if needed
  Search page (old notes):
    - need clarity about having to press "go" to apply filters, maybe put search button below filter modal button and rename filter
      modal button to say something like "Advanced search" or something, though that would imply that its separate from the main
      search and probably cause confusion when closing the modal with selected checkboxes doesn't do anything
      + Can I trigger the search form submission when the modal is closed without extra JS?
    - see about adjusting size and scroll of modal, I'd like it to just fill the screen and have a close button at the bottom, and
      scroll internally if it's too big, like the Amazon site filter box
    - filters should be grouped by type/organized somehow, so it's easy to find the tags you want. Groupings like meat, veg, starch type,
      etc. does this require extra db columns on tag models?
    - I'd like a way to easily and helpfully allow positive and negative searches, so easy to include tomatoes and exclude wheat/gluten
      - made a three-way radio button component in React, but how can I replicate that here without a full-blown React frontend?
        - 3-way meaning: two radio buttons and a label, initial state: none checked, each click cycles through first radio selected, then second radio
          selected, then none selected again. Can probably be styled to be a green unicode check and a red x
    - better way to search for and selectively include/exclude specific ingredients (cinnamon, garlic, etc) - 
    - diet-specific pre-made filters? (Jainist-friendly: no meat/roots/etc, Paleo, Gluten-free, Vegan, etc)
      - can define the rules at the model level with hashes of disallowed ingredients and/or tags, and then create the category tags on the fly
  - introductory/explanatory notes section on either recipes, or ingredients, or both - so I can include things like "I prefer gala apples" on a generic "apple" 
    ingredient, keeping the ingredients list simpler but allowing for some customization and one-off thoughts, instead of 100 different apples
    - also for recipes, a way of explaning some extra stuff, like that coq au vin is normally served with potato mash but I like baked/roasted potatoes as well
  - bulk assigning of tags to ingredients, for quickly adding a new tag to many things
    - i.e. clicking a tag should show a list of ingredients using it with checkboxes, and have an associated controller action for bulk 
      updating that tag on all checked/unchecked ingredients
    - probably best to pull up list of all ingredients with that tag first, then take param list separately, and go through original list
      one at a time - if original is not in param list, remove tag. if original is in param list, pop that one from param list and go next.
      after going through all originals, anything left in param list is new additions to that tag, go through each of those and add the tag
      two loops in a row, O(n)?
  ? put a bright color on the save/un-save button / change button to image or something

Polish (v1.2):
  - filters should have +/- instead of checkbox, some way to selectively include, exclude, or do nothing with each item
    - so users can specifically exclude pork for example
    - probably a job for more advanced UI like with React or something
    - I would like tags to be shown in groups, like "vegetables," "meat," etc, and in each group there's the different ingredients that you can toggle to include
      or exclude
      - also I'd like the heading to be a toggle as well, so you can toggle all vegetables or all meat on and off
      - at the very top there should be some quick-access meta-toggles for all the above mentioned categories, like vegan, paleo, pescetarian, etc.
        - these are likely just toggling toggles, not directly sending params themselves - so a fully in-the-UI thing
    - every filter toggle should be updated/maintained in the current session, and automatically rebuilt whenever filter is opened, preserving in case of browser
      crash, accidentally clicking off the filter screen, or whatever
  - time: card must show total time from "I want to cook" to "I'm eating food"
        : show page can break out hands-on vs hands-off cooking, possibly add as badge
  - add visual badges, probably in place of view button, possibly changing recipe card size from horizontal Golden Ratio to vertical,
    maintaining 350px width. However, horizontal evokes more childhood-tv-set nostalgia.
      : need another way to make card clickable if I'm going to remove the view button, or make view button a little smaller and
        squeeze icons above it, but I want text badges or something for clarity
        -- main badges are meat-free, vegan, gluten free, paleo?, hands-off (i.e. mostly in oven), one-pot/one-dish
        -- flavor badges? sweet, salty, fruity, citrus/tart, etc

Progression (v2):
  - menu planning and grocery list generation
  - add sides as separate sub-recipes that can be added to customize recipes, start out as separate recipes (like roasting in the oven)

The Big Time (v3):
  - lessons + techniques section
  - baking stuff
  - animated title page


!! New features - user profiles, building grocery lists !!
  + Converting to imperial units should be saved per recipe for a logged-in user
    - part of larger user profile things, what else would go in a user profile/preferences?
    - a lot of that kind of stuff could probably just get stuffed into a hash and saved in the session, but I think I want to specifically
      avoid putting too much in the session to encourage people to sign-up and get on the email list.
  - What about ingredients that are typically used as whole items? Cucumbers/Squash, lettuce, etc
    - maybe just look up standard sizes and use those in place of "1 cucumber" and when people pick imperial, it'll be converted into pounds anyways
  - can re-use same search page, but add a button for logged-in users that only filters through saved/favorited recipes
  
  MEAL PLANS
  - Each user can have many weekly meal plans
    -- each plan composed of multiple recipes
    -- each recipe in the plan (i.e. on the join model) can be assigned a particular day, and notes
    -- meal plan model will own the function(s) for generating grocery lists
    -- meal plan model will also have attribute for saving generated grocery list? or always generated dynamically? 
      - what about interactivity on the list, like checking off stuff as you get it? what about
        saving grocery lists (handled by generating from meal plans? Would someone want to save a grocery list
        separate from a meal plan? Should I even allow that?)?
  + each UserProfile has many MealPlans
    - grocery lists are arrays of ingredient IDs and quantities, owned by MealPlans and generated with MealPlan model functions
    - each MealPlan has exactly one grocery list, it is editable but there's only one per plan
      - can start with non-editable grocery lists that are always generated dynamically based on meal plan, add editiable lists later
        - easier option, only need the meal plan model

-=- Model Planning -=-

--- Pre-Soft-Launch
? make side-bar filters a partial (where else does the side-bar appear besides search results?)
? make equipment links a reusable partial (added to recipe show view, where else will it need to be used?)

! ability to change imperial or metric quantities (user) and default units (admin, but still stored as grams internally - just setting a conversion factor)
  - add bool column to ingredient for "is a liquid"
  - add function to join table (where quantities live) for conversions between imperial and metric
  - buttons connect to js func that asks controller for conversion factors, join model for quantities, and returns new value
    - quantities stored as grams internally, so conversion factor to grams is just 1 for everything
  + Imperial amounts should def be converted into pounds+ounces, or cups+ounces (for solid vs liquid), should I split out kilos and litres?

look at various things that get done to recipes, ingredients, and tags in views+controllers and
  think about what could/should be pulled into model functions
* add recipe name->slug conversion code to a helper function so it's just in one place
  - needs knowledge of where to put helpers
* make the equipment links do something, or just disable them for soft-launch until I get affiliate links going

* way to add or remove steps in recipe create/edit pages
  ! Fixed for now by creating 20 blank steps for new recipe form. Will circle back around when updating to modern UI
  - probably easy to fix with React, but that's a whole thing

get some background images+gradients going to fit the pixel-art game theme
style+format everything
  - add background gifs/movies of cooking+food to front page
    -- edit together some stock footage and put it on the home page
  - add big graphic above search bar
  - replace recipe, ingredient, and equipment links with bootstrap cards (change partials)
fix super long urls for searches -> put a block in the routing file for this route, can use Rack things to parse query strings
  - UPDATE sorta fixed by using 'check_box_tag' instead of 'formBuilder.check_box', removing the default behavior of sending empty boxes


--- Post Soft-Launch
add a bunch of recipes
---
- add grocery list function (save or <3 a recipe and it goes on the one list,
  that list also generates a grocery list)
  - eventually have multiple named custom lists

Things I did, and how
* added user profile model for saving recipes
* added ability to save recipes to your profile
* removed hamburger menu from mobile view, replaced with a couple of buttons for Profile/Logout or Login/Signup depending on whether
  you're logged in or not
* replaced all URL ids with the recipe's name, subbing hyphens for spaces (ex: /recipes/10 -> recipes/chicken-milanese)
  - added :slug as parameter in recipe model
  - changed recipe routing to -> resources :recipes, except: [:create], param: :slug
  - overwrote to_param in recipe model to return :slug instead of :id
* added devise, but being signed in doesn't do anything yet
  - added "gem 'devise'" to Gemfile
  - followed instructions on the devise github page to install and create a plain User model

* Added Users and User Profiles, and ability to favorite/save recipes
  - used devise gem for users and authentication
  - created separate UserProfile model to leave devise user and auth stuff untouched
    -- not sure if this is the "correct" way, but I like the idea of leaving the pre-built solution totally alone
       plus maybe if I want to swap devise for something else, the app-specific profile stuff is not totally coupled
       to devise
    -- each UserProfile belongs_to one User, and the profiles are created and assigned in the User controller during 
       signup
    -- UserProfile is where favorites list lives, also where meal plans will live too
  + each UserProfile has exactly one FavoriteList
    - favorite lists are a many-to-many association between UserProfiles and Recipes, through a join table
    - UserProfile show page lists favorited recipe links

* Added ability to convert between metric and imperial units on recipes
  - added conversion logic to Recipe model
    - "thin view, thin controller, fat model" pattern - everything happens in the model, the controller just gets the
        finished text and passes it to the view, which inserts it into a table
    - whether to convert or not is handled by passing or not passing a query param (convert = true)
    - all quantities for all recipes are stored in either grams or mL depending on wet or dry ingredient, then converted
      from grams to US dry ounces, and from mL to US teaspoons. The amounts are then broken down with modulo division
      into kilos/grams, liters/mL, pounds/ounces, and cups/tablespoons/teaspoons, and formatted for display
* Styled with Bootstrap and some modified game UI graphics
---

TODOs:

+ Weird Behavior/Bugs
  - Admin panel: clicking a tag to edit brings me to the edit page for that tag, not staying inside the admin panel. Need AJAX?
  - Search results sidebar behavior: add one-click way to remove the search query (like show the query with a little 'x' next to it or something
    + basically, clarify the behavior for getting exactly the search you want, so you know exactly at a glance what the search will be when you
      press 'filter'

+ Refactoring
  - single shared form for each resource (if possible)

+ Features
  - tabs or some other sort of show/hide for ingredient list, to allow many more things
  - allow filtering ingredients by category, maybe with mini-search bar?
  - JS for quick-search in-page
  - model data as a graph, all ingredient and sub-meal parts (dough, sauce, etc)
    one-directional relationships (once you use an ingredient in something, you
    can't undo it). This will allow easier linking/building lists of techniques
    and skills like "make a burre blanc" can link to the burre blanc page, or 
    just insert the steps in as a tab or hidden drop-down right in the page
    so you can skip it if you want.
  - Progressive Web App (add to home screen)
  - lock downloading to offline of recipes to paid users
  - build in way for me to A/B test different affiliate programs, to see if people
    prefer buying through amazon or some other thing (like wal-mart, if they have
    affiliate programs)

  !+! all the fancy stuff, eventually, can still use the Rails backend by just
      setting up an API that is consumed by the PWA (and the React frontend??)
      - but first, make it look pretty with normal bootstrap+AJAX, including on
        mobile
      - and when I get there, rate-limit API usage per-user, so the one clever
        person out there can't just download the entire database/DDOS the API
      - probably limit it to 1-2 recipes downloaded per second, no more than 100 per minute
     !+ What about allowing users to "download all" of their saved recipes? is 
        there a way to specifically allow that while disallowing someone from 
        maliciously grabbing everything on the database?

-!- New idea: 2-13-2020
  = Maybe it would be simpler to have just a list of steps, and manually
    enter the ingredients and quantities into the database, and search on that?
      Basically I think I need to "flatten" the hierarchy as it currently is,
      because I feel like I'm shoehorning it into place.
      - List of ingredients with relative quantities (or "base" quantity for 1
      person), a list of steps, and links to techniques used? I mean, there
      isn't that many really complicated individual techniques in normal
      cooking, I feel like it's mostly just baking/pastry stuff
      - but at the same time, I want to have quick links out to learn on the
      fly, so I can keep individual recipes "clean" and say stuff like "make a
      burre blanc" or do i?
      - As long as the steps are sensible and everything is efficiently laid
      out, I don't need to overcomplicate the data model. This is a portfolio
      project after all! Usability and getting a working, complete app out
      there is the most important thing. I can complicate it later if I really
      want to.

HYPERCHEF! Design journal (xHDJx)
- x0x Important design notes that have no other home
- x1x Where my head's at right now
- x2x What it looks like
- x3x Monetization ideas
- x4x Unsorted data scheme ideas
- x5x Unsorted ideas for things I want to be able to do
- x6x Data Schema (in rails model terms)

Important design notes that have no other home (x0x)
  - Recipe Cards:
    - 360px minimum width for mobile, target 350px wide cards, for golden ratio then 350 -> 216
    - be aware of padding and margin, those extra couple pixels can cause an ugly overflow of the base images

Where my head's at right now/running log of where I'm focusing (x1x)
  (moved to blog drafts folder - visit cgardn.github.io for latest)

What it looks like: (x2x)
  - Simple interface with just a search bar and a slideshow of movies and/or
  images behind, big colorful food pictures, people having fun cooking at home,
  stuff like that
  - Also a not-so-hidden link on the side to browse by various categories like
  region, cuisine, ingredient type, etc.
  - The basic idea is that the recipes integrate with a shopping list app, so
  you can pick what you want to eat, get a shopping list that combines the per-
  meal amounts of everything into batches (like 5 lbs of carrots), and even
  integrates with calandar apps to set reminders to do things like take meat
  out of the freezer on the morning of a particular meal, or when to start
  cooking in order to be done in time for whenever you say you want to eat that
  day.
  - For registered users/subscribers, also a library of easy-to-follow cooking
  lessons with pictures and everything, and links to recipes.

Monetization: (x3x)
  - I'd prefer no ads, if possible
  - subscription service for the lessons and fancy 3rd-party service
  integrations, very low, like $10 per year
  - affiliate links to equipment on recipe and lesson pages
  - affiliate links to amazon fresh for grocery delivery purchases
    + possibly other grocery affiliate programs like wal-mart, if they exist
  - once big enough, selling prominent space for food influencers to showcase
  their own recipes and put their own affiliate links in, make their lives
  easier etc.
  - partnerships with sponsored ingredients and equipment (probably better
  deals than affiliate links, but requires large audience I bet)

Unsorted ideas for the data scheme: (x4x)
  - 2 basic data units:
    + ingredients (onions, chicken, cardamom)
    + techniques (sear, chop, strain, bake, saute, etc)
      !! issue !! What about steps that involve intermediate products, like
                  straining a sauce? The sauce won't be a basic ingredient in
                  the db, because you construct it during the recipe.
  - Some quantity of one or more ingredients are combined with one technique to
  create a "step"
  - recipes are composed of one or more steps
  - for each ingredient+technique combo, stock photos of before, after, and
  possibly during. For example, dicing onions would have two pictures, one of
  an onion just starting to be peeled, and one of a diced onion. If the user
  clicks the link for "peeling an onion" they are taken to a lesson page on
  ways to peel an onion. There is also an affiliate link to a small food
  processor on the onion+chop step.

  - grocery lists are one or more ingredients, each with a quantity in grams,
  displayed in the user's chosen measurement system (defaults set by country).
    + calculated from a list of recipes selected by user

Unsorted functions and ideas / things I want to be able to do (x5x)
  - site-wide messages for logged-in users, set to expire after arbitrary
  amount of time
    + but not a full-blown user messaging system, that's not necessary
    + basically fancy flash messages

Data Schema (in rails model terms) (x6x)
  "-" = column in database
  "+" = association in model definition
  (out of date as of 3-16-2020 -> models have grown)

  Ingredient
    - id.integer (pk)
    - name.string
    - caloriespergram.integer

    + has_many :join_ingredientcategories_ingredients
    + has_many :ingredient_categories, through: :join_ingredientcategories_ingredients

    + has_many :join_ingredients_recipes
    + has_many :recipes, through: :join_ingredients_recipes

  Equipment
    - id.integer (pk)
    - name.string
    - equipment_type_id.integer
    + belongs_to :equipment_type

  Action
    - id.integer (pk)
    - title.string
    - body.text
    + belongs_to :recipe

  Recipe
    - id.integer (pk)
    - name.string
    - origin.string
    - author.string
    - views.integer
    - saves.integer

    + has_many :actions

    + has_many :join_ingredients_recipes
    + has_many :ingredients, through: :join_ingredients_recipes

    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipe_types, through: :join_recipetypes_recipes

  Recipe Type
    - id.integer (pk)
    - name.string
    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipes, through: :join_recipetypes_recipes

  Ingredient Type
    - id.integer (pk)
    - name.string (like meat, vegetable, etc)
    + has_many :join_ingredienttypes_ingredients
    + has_many :ingredients, through: :join_ingredienttypes_ingredients

  Equipment Type
    - id.integer (pk)
    - name.string (pan, pot, grater, etc)
    
    + has_many :equipments

-- Join Tables --
  Join_RecipeTypes_Recipe
    - t.integer :id (pk)
    - t.references :recipe
    - t.references :recipe_type
    + belongs_to :recipe
    + belongs_to :recipe_type

  Join_IngredientTypes_ingredient
    - t.integer :id (pk)
    - t.references :ingredient_type
    - t.references :ingredient
    + belongs_to :ingredient_type
    + belongs_to :ingredient

  Join_Ingredients_Recipe
    - id.integer (pk)
    - t.references :recipe
    - t.references :ingredient
    + belongs_to :recipe
    + belongs_to :ingredient
