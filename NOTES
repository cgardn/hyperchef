Big Idea: The google of recipes.

area below for TODOs and near-future planning
search (xHDJx) for design journal

Pre-Launch:
  - update status bar code on recipe cards to actually reflect time and ingredient count
  - style recipe show page
 !- paginate search results
  - verify all user-facing pages work as expected, and are visually consistent
  - put on Heroku and fill it up with at least all the Hello fresh recipes, plus
    Cassi's recipes, and whatever else I can find - hopefully at least 50, ideally
    100+
  - make my account and make sure it's admin
  - make sure all the other unused routes are actually removed from routing file, and
    associated view templates and controller actions are removed/inaccessible.

Post-Launch (v1.1):
  - test coverage of at least all the controller actions and user stories
  - refactor list:
    - Pull recipe favorite-button-form out of both show view and card and make it a partial
      - used in multiple places, on recipe card and at top of recipe show page
    - Time to think about AJAX responses to the favorite button and whatever else
  Search page (old notes):
    - need clarity about having to press "go" to apply filters, maybe put search button below filter modal button and rename filter
      modal button to say something like "Advanced search" or something, though that would imply that its separate from the main
      search and probably cause confusion when closing the modal with selected checkboxes doesn't do anything
      + Can I trigger the search form submission when the modal is closed without extra JS?
    - see about adjusting size and scroll of modal, I'd like it to just fill the screen and have a close button at the bottom, and
      scroll internally if it's too big, like the Amazon site filter box
    - filters should be grouped by type/organized somehow, so it's easy to find the tags you want. Groupings like meat, veg, starch type,
      etc. does this require extra db columns on tag models?
    - I'd like a way to easily and helpfully allow positive and negative searches, so easy to include tomatoes and exclude wheat/gluten

Polish (v1.2):
  - time: card must show total time from "I want to cook" to "I'm eating food"
        : show page can break out hands-on vs hands-off cooking, possibly add as badge
  - add visual badges, probably in place of view button, possibly changing recipe card size from horizontal Golden Ratio to vertial,
    maintaining 350px width. However, horizontal evokes more childhood-tv-set nostalgia.
      : needs other way to make card clickable if I'm going to remove the view button, or make view button a little smaller and
        squeeze icons above it, but I want text badges or something for clarity
        -- main badges are meat-free, vegan, gluten free, paleo?, hands-off (i.e. mostly in oven), one-pot/one-dish

Progression (v2):
  - menu planning and grocery list generation

The Big Time (v3):
  - lessons + techniques section
  - animated title page


!! New features - user profiles, building grocery lists !!
  + Converting to imperial units should be saved per recipe for a logged-in user
    - part of larger user profile things, what else would go in a user profile/preferences?
    - a lot of that kind of stuff could probably just get stuffed into a hash and saved in the session, but I think I want to specifically
      avoid putting too much in the session to encourage people to sign-up and get on the email list.
  - What about ingredients that are typically used as whole items? Cucumbers/Squash, lettuce, etc
    - maybe just look up standard sizes and use those in place of "1 cucumber" and when people pick imperial, it'll be converted into pounds anyways
  - can re-use same search page, but add a button for logged-in users that only filters through saved/favorited recipes
  
  MEAL PLANS
  - Each user can have many weekly meal plans
    -- each plan composed of multiple recipes
    -- each recipe in the plan (i.e. on the join model) can be assigned a particular day, and notes
    -- meal plan model will own the function(s) for generating grocery lists
    -- meal plan model will also have attribute for saving generated grocery list? or always generated dynamically? 
      - what about interactivity on the list, like checking off stuff as you get it? what about
        saving grocery lists (handled by generating from meal plans? Would someone want to save a grocery list
        separate from a meal plan? Should I even allow that?)?
  + each UserProfile has many MealPlans
    - grocery lists are arrays of ingredient IDs and quantities, owned by MealPlans and generated with MealPlan model functions
    - each MealPlan has exactly one grocery list, it is editable but there's only one per plan
      - can start with non-editable grocery lists that are always generated dynamically based on meal plan, add editiable lists later
        - easier option, only need the meal plan model

-=- Model Planning -=-

--- Pre-Soft-Launch
? make side-bar filters a partial (where else does the side-bar appear besides search results?)
? make equipment links a reusable partial (added to recipe show view, where else will it need to be used?)

! ability to change imperial or metric quantities (user) and default units (admin, but still stored as grams internally - just setting a conversion factor)
  - add bool column to ingredient for "is a liquid"
  - add function to join table (where quantities live) for conversions between imperial and metric
  - buttons connect to js func that asks controller for conversion factors, join model for quantities, and returns new value
    - quantities stored as grams internally, so conversion factor to grams is just 1 for everything
  + Imperial amounts should def be converted into pounds+ounces, or cups+ounces (for solid vs liquid), should I split out kilos and litres?

look at various things that get done to recipes, ingredients, and tags in views+controllers and
  think about what could/should be pulled into model functions
* add recipe name->slug conversion code to a helper function so it's just in one place
  - needs knowledge of where to put helpers
* make the equipment links do something, or just disable them for soft-launch until I get affiliate links going

* way to add or remove steps in recipe create/edit pages
  ! Fixed for now by creating 20 blank steps for new recipe form. Will circle back around when updating to modern UI
  - probably easy to fix with React, but that's a whole thing

get some background images+gradients going to fit the pixel-art game theme
style+format everything
  - add background gifs/movies of cooking+food to front page
    -- edit together some stock footage and put it on the home page
  - add big graphic above search bar
    -- pixel art? animated chipmunk chef hero guy?
      - dream: keep sky-blue background, add green-grass/kitchen tile floor, pixel-chef-warrior swings in and fights vegetables with spatula/knife
              while wearing toque, ends with star wars-style holding spatula to sky while chef's jacket flaps around him, stays there
  - replace recipe, ingredient, and equipment links with bootstrap cards (change partials)
fix super long urls for searches -> put a block in the routing file for this route, can use Rack things to parse query strings
  - UPDATE sorta fixed by using 'check_box_tag' instead of 'formBuilder.check_box', removing the default behavior of sending empty boxes


--- Post Soft-Launch
add a bunch of recipes
---
add user profile model for saving recipes
add ability to save recipes to your profile
  - all the little parts, like the 'save/favorite' button/icon or whatever,
      the columns in the user profile model, plus the routes and functions to connect it all
add grocery list function (save or <3 a recipe and it goes on the one list, that list also generates a grocery list)
- eventually have multiple named custom lists

Things I did, and how
* removed hamburger menu from mobile view, replaced with a couple of buttons for Profile/Logout or Login/Signup depending on whether
  you're logged in or not
* replaced all URL ids with the recipe's name, subbing hyphens for spaces (ex: /recipes/10 -> recipes/chicken-milanese)
  - added :slug as parameter in recipe model
  - changed recipe routing to -> resources :recipes, except: [:create], param: :slug
  - overwrote to_param in recipe model to return :slug instead of :id
* added devise, but being signed in doesn't do anything yet
  - added "gem 'devise'" to Gemfile
  - followed instructions on the devise github page to install and create a plain User model

* Added Users and User Profiles, and ability to favorite/save recipes
  - used devise gem for users and authentication
  - created separate UserProfile model to leave devise user and auth stuff untouched
    -- not sure if this is the "correct" way, but I like the idea of leaving the pre-built solution totally alone
       plus maybe if I want to swap devise for something else, the app-specific profile stuff is not totally coupled
       to devise
    -- each UserProfile belongs_to one User, and the profiles are created and assigned in the User controller during 
       signup
    -- UserProfile is where favorites list lives, also where meal plans will live too
  + each UserProfile has exactly one FavoriteList
    - favorite lists are a many-to-many association between UserProfiles and Recipes, through a join table
    - UserProfile show page lists favorited recipe links

* Added ability to convert between metric and imperial units on recipes
  - added conversion logic to Recipe model
    - "thin view, thin controller, fat model" pattern - everything happens in the model, the controller just gets the
        finished text and passes it to the view, which inserts it into a table
    - whether to convert or not is handled by passing or not passing a query param (convert = true)
    - all quantities for all recipes are stored in either grams or mL depending on wet or dry ingredient, then converted
      from grams to US dry ounces, and from mL to US teaspoons. The amounts are then broken down with modulo division
      into kilos/grams, liters/mL, pounds/ounces, and cups/tablespoons/teaspoons, and formatted for display
---

TODOs:

add ability to edit what gram quantities are displayed as on recipe edit page
+ Weird Behavior/Bugs
  - Admin panel: clicking a tag to edit brings me to the edit page for that tag, not staying inside the admin panel. Need AJAX?
  - Search results sidebar behavior: add one-click way to remove the search query (like show the query with a little 'x' next to it or something
    + basically, clarify the behavior for getting exactly the search you want, so you know exactly at a glance what the search will be when you
      press 'filter'
  - Recipe edit flow: if two steps have the same order number, it pushes
    everything up by 1 to preserve order. Better would be rejecting the
    edit, putting error in flash, and re-rendering the form. Even better
    still would be somehow doing this with model-level validations, if
    possible (or maybe an #update before-action).
    + Also could use a way to check for gaps in the order and fix them
      (i.e. if the steps have turned into 1-3-5-6-7, correct it into 1-2-3-4-5
      while preserving original order)
    + Eventuall I want to make this drag-and-drop anyways, or at least 
      Steam-style numbers with up/down clicky boxes
  - Waaay too many database hits for a filter search

+ Refactoring
  - single shared form for each resource (if possible)

+ Features
  - actual styling with Bootstrap
  - tabs or some other sort of show/hide for ingredient list, to allow many more things
  - allow filtering ingredients by category, maybe with mini-search bar?
  - JS for quick-search in-page
  - model data as a graph, all ingredient and sub-meal parts (dough, sauce, etc)
    one-directional relationships (once you use an ingredient in something, you
    can't undo it). This will allow easier linking/building lists of techniques
    and skills like "make a burre blanc" can link to the burre blanc page, or 
    just insert the steps in as a tab or hidden drop-down right in the page
    so you can skip it if you want.
  - Progressive Web App (add to home screen)
  - lock downloading to offline of recipes to paid users
  - build in way for me to A/B test different affiliate programs, to see if people
    prefer buying through amazon or some other thing (like wal-mart, if they have
    affiliate programs)

  !+! all the fancy stuff, eventually, can still use the Rails backend by just
      setting up an API that is consumed by the PWA (and the React frontend??)
      - but first, make it look pretty with normal bootstrap+AJAX, including on
        mobile
      - and when I get there, rate-limit API usage per-user, so the one clever
        person out there can't just download the entire database/DDOS the API
      - probably limit it to 1-2 recipes downloaded per second, no more than 100 per minute
     !+ What about allowing users to "download all" of their saved recipes? is 
        there a way to specifically allow that while disallowing someone from 
        maliciously grabbing everything on the database?

-!- New idea: 2-13-2020
  = Maybe it would be simpler to have just a list of steps, and manually
    enter the ingredients and quantities into the database, and search on that?
      Basically I think I need to "flatten" the hierarchy as it currently is,
      because I feel like I'm shoehorning it into place.
      - List of ingredients with relative quantities (or "base" quantity for 1
      person), a list of steps, and links to techniques used? I mean, there
      isn't that many really complicated individual techniques in normal
      cooking, I feel like it's mostly just baking/pastry stuff
      - but at the same time, I want to have quick links out to learn on the
      fly, so I can keep individual recipes "clean" and say stuff like "make a
      burre blanc" or do i?
      - As long as the steps are sensible and everything is efficiently laid
      out, I don't need to overcomplicate the data model. This is a portfolio
      project after all! Usability and getting a working, complete app out
      there is the most important thing. I can complicate it later if I really
      want to.

HYPERCHEF! Design journal (xHDJx)
- x0x Important design notes that have no other home
- x1x Where my head's at right now
- x2x What it looks like
- x3x Monetization ideas
- x4x Unsorted data scheme ideas
- x5x Unsorted ideas for things I want to be able to do
- x6x Data Schema (in rails model terms)

Important design notes that have no other home (x0x)
  - Recipe Cards:
    - 360px minimum width for mobile, target 350px wide cards, for golden ratio then 350 -> 216

Where my head's at right now/running log of where I'm focusing (x1x)
  - (3-19-2020 extra thoughts) While figuring out the recipe card, I 
  thought of several more visual badges I want to add in the form of
  recipe tags (which trigger the badges?). Besides vegetarian/meat-free, 
  vegan, gluten-free, I'll also have paleo, hands-off (meaning most of
  the time is in the oven or something, less than 10 minutes of hands-on
  prep time), and one-pot (meaning everything gets put in a single pot, 
  limited cleanup). Or maybe I'll go right with a limited cleanup badge?
  Either way, the badges and such are probably for version 2, after launch,
  test coverage, and the first major refactor.
  - (3-19-2020 UPDATE) D'oh - quick update, I forgot to add the links
  to the recipe cards that actually let you view the dang recipe! And
  I forgot about styling the show page! oops....take everything I said and
  add another 3-5 hours haha
  - (3-19-2020) OK! After a lot of trial and error over the last few days,
  now there's a (relativey) consistent look-and-feel to the UI (going for
  a vaguely-SNES-retro-game feel, just enough to appeal to the kind of people
  who spend a lot of time at home and want to learn to cook, but don't feel
  like the typical Instagram/influencer cooking world appeals to their
  aesthetic, aka...me lol). I mentioned yesterday about settling on 350px
  wide Bootstrap cards, and I spent half the day yesterday fiddling with
  pixel art editors (mtpaint and GraphicsGale) to put together some 
  images to serve as UI elements. I'm using free art from two amazing
  game artists, KenneyNL and (food art guy from ItchIO, !!! INCLUDE LINKS !!!).
  After another hour or two getting the link visited+hover styles right and
  fixing a couple missed pixels on some of the images, I think I'm finally
  ready to launch!!! Well, soft-launch at least. I'm not going full
  announcement mode until after I have the site up on Heroku and full of at 
  least 100 recipes. That's going to take a while though, since typing 
  everything in takes a while, plus I have to add all the tags and ingredients
  as well. The admin pages for entering and editing recipes/ingredients/tags
  are totally unstyled, but no one will ever see them but me so I'm not that
  worried. Also, I'm not sure what the "correct" way to add myself an admin
  account is, I guess just going into the console and manually setting the
  admin attribute? I already have it all set up to not accept changes to
  the admin attribute anywhere, so I guess as long as no one gains control
  of my dev laptop and gets my SSL keys they can't make themselves admin, 
  but I'd have bigger problems by then anyway (like an attacker with that much
  control could just nuke the whole site with heroku destroy). 
  I'm pretty noobish with security stuff still, which is part of why I'm 
  learning Rails first and using Devise for auth and accounts - they handle
  all the basic stuff for you.
  Other than that, we're almost there! I'd also like to add a subtitle to the main page,
  something like "recipes without the fluff" (but more punny), but I'm not
  sure if that's too much visual clutter. I guess we'll see. 
  I've been avoiding launch as long as possible, partly because I'm 
  going to have to spend the $7 a month plus domain costs, and partly because
  once it's live making changes won't be so consequence-free as they are now.
  But I guess that's part of the process! Time to get used to updating live
  sites, especially since Hyperchef is supposed to be my main portfolio project. 
  After that it's just one more day for a quick resume site with Sinatra and
  then it'll be time to start blasting it all over the internet and find out
  how many things I've done wrong! Can't wait! :)

  - (3-18-2020) Added new recipe columns to edit page (prep time, cook time,
  card image name). Probably going to remove all of that and do a visual
  grid/thing to show at a glance the recipe stats - meat, vegan, overall
  hands-on time required, difficulty (measured by number of steps), 
  number ingredients required (binned/heuristic impact on difficulty),
  rare/exotic ingredients required. Can do most of this through ingredient
  tags and model functions, just need a sensible way of designing the 
  indicator UI. I still want it to fit in a 350px wide card, but it can be 
  longer than 216px, possibly making 350 the short side of the golden ratio.
  (~566px)
  - (3-17-2020) I decided to remove the hamburger menu from the mobile view.
  Like I said yesterday, I just don't like the collapse animation. Maybe 
  it's because my laptop is underpowered (it's a $200 HP Stream laptop
  - I didn't have a lot of money to spend), but it also pushed page content
  around to make room for the content, and I don't like that in a navbar.
  I'm sure there's ways to make it pop-over real nice with "modern" tech but
  I'm not on to React yet, so I settled on the simple solution: Plain Old
  Buttons.
    I finally made the recipe search results into something more than just
  plain links. I'm going with Bootstrap cards for now, because I'm going 
  with just Bootstrap for now, and cards are the easiest/most complete thing
  that can I can set to a fixed width and wrap in Bootstrap layout classes
  to automatically lay out the rows of cards depending on how wide the viewer's 
  window is. For now the cards are 350px wide, but in the future I'd like
  to ask the browser for the viewport width and adjust the cards size slightly
  so there isn't a huge amount of white space when the screen width is near a 
  multiple of 1.5x card width, but as long as everything stays centered I 
  guess it'll be fine fixed at 350px.
    Also for the record, getting the cards to align and center correctly was 
  a real pain the rear, fiddling with the padding and margins on the cards
  and the container divs. Part of it was my fault, because the layout I've
  been patching together as I go was a real mess, but also partly because
  the Bootstrap spacing utility classes measure in rems, so I had to figure
  out which needed padding and which needed auto-margin, which meant actually
  using my brain. Ugh.
    Other minor changes: changed the un/favoriting action in the UserProfile
  controller to redirect back instead of to the recipe show view, so you can 
  favorite right from the search results (the card has a button, will be a small
  heart eventually). Still no AJAX, which is coming, but for now redirect-back
  is good enough since the browser remembers your filter selections. Had a
  weird problem with the favorite button the recipe#show view, it was putting
  a nonce instead of the recipe ID into the form hidden input but stopped
  after I fiddled with it, even though I ended up changing nothing. Weird.
  - (3-16-2020) Focusing on mobile styling, fiddling with buttons and stuff. 
  Tried putting profile/login/signup links into a collapsible hamburger on 
  mobile, but the animation feels clunky and shifts all the content down to
  make it fit. I could probably tinker with the animation, maybe remove it, 
  but that seems like a lot of work for what amounts to 4 buttons shown 2 
  at a time at most (Profile | Logout, Login | Signup). I don't imagine there'd
  ever be as extensive a side-menu as a place like Amazon, which is where I'm 
  taking some mobile design queues from in terms of searchable database of 
  items (well, recipes, but functionally similar just without cart+checkout).
  Also I have some pretty strong opinions about UI and hiding things, so I
  think it's best to just remove the hamburger and try to keep the buttons
  clear and simple on the header. I also have an image that brings back to
  the home page, and I'd like to add one for going back to the overall
  browse screen too (a "back to search" or something.)
  - (pre- 3-16-2020) Retroactive first entry. I've been working on this 
  for about a month now, in place of The Odin Project's final Rails project
  to replicate Facebook or some other social media site. I've probably spent
  way more time on this than I would have on the final project, mainly due to
  the more complicated data models I've put together for an efficient way of
  representing recipes and their ingredients. I'm trying to avoid repetition
  so each ingredient has a single entry in a table, and all recipes just 
  reference that one thing. Recipes are basically just a set of text steps
  and a lot of references to ingredients. Quantities of ingredients for a 
  recipe are saved on the join model that connects recipes with ingredients.
  I'm not sure if it's actually more efficient, because of my newness, 
  but it seems pretty clever if I do say so myself.
  + My main motivation behind this project is to follow the common advice of 
  solving problems you have yourself. I also wanted to do something more 
  original than just whatever TOP says to do for a final project, to make
  myself stand out more. But mostly it's because I'm trying to learn to cook
  more than just beans and rice, and my travels through the food side of the
  internet have shown me that pretty much every recipe website is a train
  wreck of ads and paragraphs of pointless prose about the author's personal
  history with chicken stew.
    (for me): also i looked up copyright on recipes, you can copy lists of
              ingredients and plain-language instructions, but any prose
              or creative descriptions and obviously photos are copywritten.

What it looks like: (x2x)
  - Simple interface with just a search bar and a slideshow of movies and/or
  images behind, big colorful food pictures, people having fun cooking at home,
  stuff like that
  - Also a not-so-hidden link on the side to browse by various categories like
  region, cuisine, ingredient type, etc.
  - The basic idea is that the recipes integrate with a shopping list app, so
  you can pick what you want to eat, get a shopping list that combines the per-
  meal amounts of everything into batches (like 5 lbs of carrots), and even
  integrates with calandar apps to set reminders to do things like take meat
  out of the freezer on the morning of a particular meal, or when to start
  cooking in order to be done in time for whenever you say you want to eat that
  day.
  - For registered users/subscribers, also a library of easy-to-follow cooking
  lessons with pictures and everything, and links to recipes.

Monetization: (x3x)
  - I'd prefer no ads, if possible
  - subscription service for the lessons and fancy 3rd-party service
  integrations, very low, like $10 per year
  - affiliate links to equipment on recipe and lesson pages
  - affiliate links to amazon fresh for grocery delivery purchases
    + possibly other grocery affiliate programs like wal-mart, if they exist
  - once big enough, selling prominent space for food influencers to showcase
  their own recipes and put their own affiliate links in, make their lives
  easier etc.
  - partnerships with sponsored ingredients and equipment (probably better
  deals than affiliate links, but requires large audience I bet)

Unsorted ideas for the data scheme: (x4x)
  - 2 basic data units:
    + ingredients (onions, chicken, cardamom)
    + techniques (sear, chop, strain, bake, saute, etc)
      !! issue !! What about steps that involve intermediate products, like
                  straining a sauce? The sauce won't be a basic ingredient in
                  the db, because you construct it during the recipe.
  - Some quantity of one or more ingredients are combined with one technique to
  create a "step"
  - recipes are composed of one or more steps
  - for each ingredient+technique combo, stock photos of before, after, and
  possibly during. For example, dicing onions would have two pictures, one of
  an onion just starting to be peeled, and one of a diced onion. If the user
  clicks the link for "peeling an onion" they are taken to a lesson page on
  ways to peel an onion. There is also an affiliate link to a small food
  processor on the onion+chop step.

  - grocery lists are one or more ingredients, each with a quantity in grams,
  displayed in the user's chosen measurement system (defaults set by country).
    + calculated from a list of recipes selected by user

Unsorted functions and ideas / things I want to be able to do (x5x)
  - site-wide messages for logged-in users, set to expire after arbitrary
  amount of time
    + but not a full-blown user messaging system, that's not necessary
    + basically fancy flash messages

Data Schema (in rails model terms) (x6x)
  "-" = column in database
  "+" = association in model definition
  (out of date as of 3-16-2020 -> models have grown)

  Ingredient
    - id.integer (pk)
    - name.string
    - caloriespergram.integer

    + has_many :join_ingredientcategories_ingredients
    + has_many :ingredient_categories, through: :join_ingredientcategories_ingredients

    + has_many :join_ingredients_recipes
    + has_many :recipes, through: :join_ingredients_recipes

  Equipment
    - id.integer (pk)
    - name.string
    - equipment_type_id.integer
    + belongs_to :equipment_type

  Action
    - id.integer (pk)
    - title.string
    - body.text
    + belongs_to :recipe

  Recipe
    - id.integer (pk)
    - name.string
    - origin.string
    - author.string
    - views.integer
    - saves.integer

    + has_many :actions

    + has_many :join_ingredients_recipes
    + has_many :ingredients, through: :join_ingredients_recipes

    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipe_types, through: :join_recipetypes_recipes

  Recipe Type
    - id.integer (pk)
    - name.string
    + has_many :join_recipetypes_recipes, dependent: :destroy
    + has_many :recipes, through: :join_recipetypes_recipes

  Ingredient Type
    - id.integer (pk)
    - name.string (like meat, vegetable, etc)
    + has_many :join_ingredienttypes_ingredients
    + has_many :ingredients, through: :join_ingredienttypes_ingredients

  Equipment Type
    - id.integer (pk)
    - name.string (pan, pot, grater, etc)
    
    + has_many :equipments

-- Join Tables --
  Join_RecipeTypes_Recipe
    - t.integer :id (pk)
    - t.references :recipe
    - t.references :recipe_type
    + belongs_to :recipe
    + belongs_to :recipe_type

  Join_IngredientTypes_ingredient
    - t.integer :id (pk)
    - t.references :ingredient_type
    - t.references :ingredient
    + belongs_to :ingredient_type
    + belongs_to :ingredient

  Join_Ingredients_Recipe
    - id.integer (pk)
    - t.references :recipe
    - t.references :ingredient
    + belongs_to :recipe
    + belongs_to :ingredient
